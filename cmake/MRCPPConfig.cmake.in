# MRCPPConfig.cmake
# ---------------------
#
# MRCPP cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   MRCPP_FOUND - true if MRCPP and all required components found on the system
#   MRCPP_VERSION - MRCPP version in format Major.Minor.Release
#   MRCPP_INCLUDE_DIRS - Directory where the MRCPP headers are located.
#   MRCPP_INCLUDE_DIR - same as DIRS
#   MRCPP_DEFINITIONS: Definitions necessary to use MRCPP, namely USING_MRCPP.
#   MRCPP_LIBRARIES - MRCPP library to link against.
#   MRCPP_LIBRARY - same as LIBRARIES
#
#
# Exported targets:
#
# ::
#
# If MRCPP is found, this module defines the following :prop_tgt:`IMPORTED`
# target. ::
#
#   MRCPP::mrcpp - the main MRCPP library with header & defs attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(MRCPP)
#   find_package(MRCPP 1.1.7 CONFIG REQUIRED)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   MRCPP_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_MRCPP - CMake variable, disables
#       find_package(MRCPP) perhaps to force internal build

@PACKAGE_INIT@

set(PN MRCPP)

# find includes
unset(_temp_h CACHE)
find_path(_temp_h
  NAMES MRCPP/mrcpp_declarations.h
  PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
  NO_DEFAULT_PATH)
if(_temp_h)
  set(${PN}_INCLUDE_DIR "${_temp_h}")
  set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
else()
  set(${PN}_FOUND 0)
  if(NOT CMAKE_REQUIRED_QUIET)
    message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
  endif()
endif()

# find library
set(_hold_library_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
unset(_temp CACHE)
find_library(_temp
  NAMES mrcpp
  PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@
  NO_DEFAULT_PATH)
if(_temp)
  set(${PN}_LIBRARY "${_temp}")
  set(${PN}_FOUND 1)
else()
  set(${PN}_FOUND 0)
  if(NOT CMAKE_REQUIRED_QUIET)
    message(STATUS "${PN}Config missing component: library (${PN}: ${_temp})")
  endif()
endif()
set(CMAKE_FIND_LIBRARY_SUFFIXES ${_hold_library_suffixes})
set(${PN}_LIBRARIES ${${PN}_LIBRARY})
set(${PN}_DEFINITIONS USING_${PN})

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::mrcpp)
  get_filename_component(_fext ${${PN}_LIBRARY} EXT)
  include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets.cmake")

  find_package(Eigen3 CONFIG REQUIRED)

  get_target_property(MRCPP_HAS_OMP MRCPP::mrcpp MRCPP_HAS_OMP)
  if(MRCPP_HAS_OMP)
    find_package(OpenMP REQUIRED QUIET COMPONENTS CXX)
    message(STATUS "MRCPP built with OpenMP support (found version \"${OpenMP_CXX_VERSION}\")")
    target_link_libraries(MRCPP::mrcpp INTERFACE OpenMP::OpenMP_CXX)
  endif()

  get_target_property(MRCPP_HAS_MPI MRCPP::mrcpp MRCPP_HAS_MPI)
  if(MRCPP_HAS_MPI)
    find_package(MPI REQUIRED QUIET COMPONENTS CXX)
    message(STATUS "MRCPP built with MPI support (found version \"${MPI_CXX_VERSION}\")")
    target_link_libraries(MRCPP::mrcpp INTERFACE MPI::MPI_CXX)
  endif()
endif()

