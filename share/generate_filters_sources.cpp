#include <fstream>
#include <iostream>
#include <map>
#include <utility>
#include <vector>

#include <Eigen/Core>

inline std::string top_as_string(std::string what) noexcept {
    std::ostringstream os;

    os << "inline auto get_" << what << "(int type, int order) -> Eigen::MatrixXd {" << std::endl;
    os << "  auto func_type = static_cast<mrcpp::FuncType>(type);" << std::endl;
    os << "  switch (func_type) {" << std::endl;
    os << "    case mrcpp::FuncType::Legendre:" << std::endl;
    os << "      return detail::get_L_" << what << "(order);" << std::endl;
    os << "      break;" << std::endl;
    os << "    case mrcpp::FuncType::Interpol:" << std::endl;
    os << "      return detail::get_I_" << what << "(order);" << std::endl;
    os << "      break;" << std::endl;
    os << "    default:" << std::endl;
    os << "      MSG_ABORT(\"Unknown filter type\");" << std::endl;
    os << "      break;" << std::endl;
    os << "  }" << std::endl;
    os << "}" << std::endl;

    return os.str();
}

inline std::string middle_as_string(std::string poly, std::string what, std::string body) noexcept {
    std::ostringstream os;

    os << "inline auto get_" << poly << "_" << what << "(int order) -> Eigen::MatrixXd {" << std::endl;
    os << "  switch (order) {" << std::endl;
    os << body;
    os << "    default:" << std::endl;
    os << "      MSG_ABORT(\"Maximum order is 41\");" << std::endl;
    os << "      break;" << std::endl;
    os << "  }" << std::endl;
    os << "}" << std::endl;

    return os.str();
}

inline std::string get_body(int order, std::string prefix) noexcept {
    std::ostringstream os;

    os << "    case " << std::to_string(order) << ":" << std::endl;
    os << "      return get_" << prefix << "_" << std::to_string(order) << "();" << std::endl;
    os << "      break;" << std::endl;

    return os.str();
}

int main(int argc, char **argv) {
    std::ofstream hpp;
    hpp.open("FilterData.h");
    hpp << "// THIS FILE HAS BEEN AUTOGENERATED, DO NOT TOUCH\n" << std::endl;
    hpp << "#include <Eigen/Core>\n" << std::endl;
    hpp << "#include \"MRCPP/constants.h\"\n" << std::endl;
    hpp << "#include \"utils/Printer.h\"\n" << std::endl;
    hpp << "\nnamespace mrcpp {" << std::endl;
    hpp << "inline auto get_G0(int type, int order) -> Eigen::MatrixXd;" << std::endl;
    hpp << "inline auto get_H0(int type, int order) -> Eigen::MatrixXd;" << std::endl;
    hpp << "\nnamespace detail {" << std::endl;
    hpp << "inline auto get_L_G0(int order) -> Eigen::MatrixXd;" << std::endl;
    hpp << "inline auto get_L_H0(int order) -> Eigen::MatrixXd;" << std::endl;
    hpp << "inline auto get_I_G0(int order) -> Eigen::MatrixXd;" << std::endl;
    hpp << "inline auto get_I_H0(int order) -> Eigen::MatrixXd;" << std::endl;

    Eigen::IOFormat CommaInitFmt(Eigen::FullPrecision, Eigen::DontAlignCols, ", ", ", ", "", "", " << ", "");

    std::ostringstream os_hpp, bodies;
    for (std::string type : {"L", "I"}) {
        for (std::string f : {"G0", "H0"}) {
            auto key = type + "_" + f;

            bodies << "inline auto get_" << type << "_" << f << "(int order) -> Eigen::MatrixXd {" << std::endl;
            bodies << "  switch (order) {" << std::endl;
            for (auto order = 1; order <= 41; ++order) {
                bodies << get_body(order, key);
                auto name = key + "_" + std::to_string(order);
                std::ifstream fis("MRCPP/mwfilters/" + name, std::ios::binary);
                auto K = order + 1;
                double scratch[K];
                Eigen::MatrixXd m = Eigen::MatrixXd::Zero(K, K);
                fis.read((char *)m.data(), K * K * sizeof(double));
                std::string eig_type = "Eigen::Matrix<double, " + std::to_string(K) + ", " + std::to_string(K) + ">";

                hpp << "auto get_" << name << "() noexcept -> " << eig_type << ";" << std::endl;

                std::ofstream cc;
                cc.open(name + ".cpp");
                cc << "// THIS FILE HAS BEEN AUTOGENERATED, DO NOT TOUCH\n" << std::endl;
                cc << "#include \"FilterData.h\"\n" << std::endl;
                cc << "#include <Eigen/Core>\n" << std::endl;
                cc << "\nnamespace mrcpp {" << std::endl;
                cc << "namespace detail {" << std::endl;
                cc << "auto get_" << name << "() noexcept -> " << eig_type << " {" << std::endl;
                cc << "  return (" << eig_type << "()" << m.transpose().format(CommaInitFmt) << ").finished();" << std::endl;
                cc << "}" << std::endl;
                cc << "} // namespace mrcpp" << std::endl;
                cc << "} // namespace detail" << std::endl;
                cc.close();
            }
            bodies << "    default:" << std::endl;
            bodies << "      MSG_ABORT(\"Maximum order is 41\");" << std::endl;
            bodies << "      break;" << std::endl;
            bodies << "  }" << std::endl;
            bodies << "}" << std::endl;
        }
    }
    hpp << bodies.str() << std::endl;
    hpp << "} // namespace detail" << std::endl;
    hpp << top_as_string("G0") << std::endl;
    hpp << top_as_string("H0") << std::endl;
    hpp << "} // namespace mrcpp" << std::endl;
    hpp.close();
}
