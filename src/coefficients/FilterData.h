/*
 * MRCPP, a numerical library based on multiresolution analysis and
 * the multiwavelet basis which provide low-scaling algorithms as well as
 * rigorous error control in numerical computations.
 * Copyright (C) 2019 Stig Rune Jensen, Jonas Juselius, Luca Frediani and contributors.
 *
 * This file is part of MRCPP.
 *
 * MRCPP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MRCPP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MRCPP.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For information on the complete list of contributors to MRCPP, see:
 * <https://mrcpp.readthedocs.io/>
 */

// THIS FILE HAS BEEN AUTOGENERATED, DO NOT TOUCH

#include <Eigen/Core>

#include "MRCPP/constants.h"

#include "utils/Printer.h"


namespace mrcpp {
inline auto get_G0(int type, int order) -> Eigen::MatrixXd;
inline auto get_H0(int type, int order) -> Eigen::MatrixXd;

namespace detail {
inline auto get_L_G0(int order) -> Eigen::MatrixXd;
inline auto get_L_H0(int order) -> Eigen::MatrixXd;
inline auto get_I_G0(int order) -> Eigen::MatrixXd;
inline auto get_I_H0(int order) -> Eigen::MatrixXd;
auto get_L_G0_1() noexcept -> Eigen::Matrix<double, 2, 2>;
auto get_L_G0_2() noexcept -> Eigen::Matrix<double, 3, 3>;
auto get_L_G0_3() noexcept -> Eigen::Matrix<double, 4, 4>;
auto get_L_G0_4() noexcept -> Eigen::Matrix<double, 5, 5>;
auto get_L_G0_5() noexcept -> Eigen::Matrix<double, 6, 6>;
auto get_L_G0_6() noexcept -> Eigen::Matrix<double, 7, 7>;
auto get_L_G0_7() noexcept -> Eigen::Matrix<double, 8, 8>;
auto get_L_G0_8() noexcept -> Eigen::Matrix<double, 9, 9>;
auto get_L_G0_9() noexcept -> Eigen::Matrix<double, 10, 10>;
auto get_L_G0_10() noexcept -> Eigen::Matrix<double, 11, 11>;
auto get_L_G0_11() noexcept -> Eigen::Matrix<double, 12, 12>;
auto get_L_G0_12() noexcept -> Eigen::Matrix<double, 13, 13>;
auto get_L_G0_13() noexcept -> Eigen::Matrix<double, 14, 14>;
auto get_L_G0_14() noexcept -> Eigen::Matrix<double, 15, 15>;
auto get_L_G0_15() noexcept -> Eigen::Matrix<double, 16, 16>;
auto get_L_G0_16() noexcept -> Eigen::Matrix<double, 17, 17>;
auto get_L_G0_17() noexcept -> Eigen::Matrix<double, 18, 18>;
auto get_L_G0_18() noexcept -> Eigen::Matrix<double, 19, 19>;
auto get_L_G0_19() noexcept -> Eigen::Matrix<double, 20, 20>;
auto get_L_G0_20() noexcept -> Eigen::Matrix<double, 21, 21>;
auto get_L_G0_21() noexcept -> Eigen::Matrix<double, 22, 22>;
auto get_L_G0_22() noexcept -> Eigen::Matrix<double, 23, 23>;
auto get_L_G0_23() noexcept -> Eigen::Matrix<double, 24, 24>;
auto get_L_G0_24() noexcept -> Eigen::Matrix<double, 25, 25>;
auto get_L_G0_25() noexcept -> Eigen::Matrix<double, 26, 26>;
auto get_L_G0_26() noexcept -> Eigen::Matrix<double, 27, 27>;
auto get_L_G0_27() noexcept -> Eigen::Matrix<double, 28, 28>;
auto get_L_G0_28() noexcept -> Eigen::Matrix<double, 29, 29>;
auto get_L_G0_29() noexcept -> Eigen::Matrix<double, 30, 30>;
auto get_L_G0_30() noexcept -> Eigen::Matrix<double, 31, 31>;
auto get_L_G0_31() noexcept -> Eigen::Matrix<double, 32, 32>;
auto get_L_G0_32() noexcept -> Eigen::Matrix<double, 33, 33>;
auto get_L_G0_33() noexcept -> Eigen::Matrix<double, 34, 34>;
auto get_L_G0_34() noexcept -> Eigen::Matrix<double, 35, 35>;
auto get_L_G0_35() noexcept -> Eigen::Matrix<double, 36, 36>;
auto get_L_G0_36() noexcept -> Eigen::Matrix<double, 37, 37>;
auto get_L_G0_37() noexcept -> Eigen::Matrix<double, 38, 38>;
auto get_L_G0_38() noexcept -> Eigen::Matrix<double, 39, 39>;
auto get_L_G0_39() noexcept -> Eigen::Matrix<double, 40, 40>;
auto get_L_G0_40() noexcept -> Eigen::Matrix<double, 41, 41>;
auto get_L_G0_41() noexcept -> Eigen::Matrix<double, 42, 42>;
auto get_L_H0_1() noexcept -> Eigen::Matrix<double, 2, 2>;
auto get_L_H0_2() noexcept -> Eigen::Matrix<double, 3, 3>;
auto get_L_H0_3() noexcept -> Eigen::Matrix<double, 4, 4>;
auto get_L_H0_4() noexcept -> Eigen::Matrix<double, 5, 5>;
auto get_L_H0_5() noexcept -> Eigen::Matrix<double, 6, 6>;
auto get_L_H0_6() noexcept -> Eigen::Matrix<double, 7, 7>;
auto get_L_H0_7() noexcept -> Eigen::Matrix<double, 8, 8>;
auto get_L_H0_8() noexcept -> Eigen::Matrix<double, 9, 9>;
auto get_L_H0_9() noexcept -> Eigen::Matrix<double, 10, 10>;
auto get_L_H0_10() noexcept -> Eigen::Matrix<double, 11, 11>;
auto get_L_H0_11() noexcept -> Eigen::Matrix<double, 12, 12>;
auto get_L_H0_12() noexcept -> Eigen::Matrix<double, 13, 13>;
auto get_L_H0_13() noexcept -> Eigen::Matrix<double, 14, 14>;
auto get_L_H0_14() noexcept -> Eigen::Matrix<double, 15, 15>;
auto get_L_H0_15() noexcept -> Eigen::Matrix<double, 16, 16>;
auto get_L_H0_16() noexcept -> Eigen::Matrix<double, 17, 17>;
auto get_L_H0_17() noexcept -> Eigen::Matrix<double, 18, 18>;
auto get_L_H0_18() noexcept -> Eigen::Matrix<double, 19, 19>;
auto get_L_H0_19() noexcept -> Eigen::Matrix<double, 20, 20>;
auto get_L_H0_20() noexcept -> Eigen::Matrix<double, 21, 21>;
auto get_L_H0_21() noexcept -> Eigen::Matrix<double, 22, 22>;
auto get_L_H0_22() noexcept -> Eigen::Matrix<double, 23, 23>;
auto get_L_H0_23() noexcept -> Eigen::Matrix<double, 24, 24>;
auto get_L_H0_24() noexcept -> Eigen::Matrix<double, 25, 25>;
auto get_L_H0_25() noexcept -> Eigen::Matrix<double, 26, 26>;
auto get_L_H0_26() noexcept -> Eigen::Matrix<double, 27, 27>;
auto get_L_H0_27() noexcept -> Eigen::Matrix<double, 28, 28>;
auto get_L_H0_28() noexcept -> Eigen::Matrix<double, 29, 29>;
auto get_L_H0_29() noexcept -> Eigen::Matrix<double, 30, 30>;
auto get_L_H0_30() noexcept -> Eigen::Matrix<double, 31, 31>;
auto get_L_H0_31() noexcept -> Eigen::Matrix<double, 32, 32>;
auto get_L_H0_32() noexcept -> Eigen::Matrix<double, 33, 33>;
auto get_L_H0_33() noexcept -> Eigen::Matrix<double, 34, 34>;
auto get_L_H0_34() noexcept -> Eigen::Matrix<double, 35, 35>;
auto get_L_H0_35() noexcept -> Eigen::Matrix<double, 36, 36>;
auto get_L_H0_36() noexcept -> Eigen::Matrix<double, 37, 37>;
auto get_L_H0_37() noexcept -> Eigen::Matrix<double, 38, 38>;
auto get_L_H0_38() noexcept -> Eigen::Matrix<double, 39, 39>;
auto get_L_H0_39() noexcept -> Eigen::Matrix<double, 40, 40>;
auto get_L_H0_40() noexcept -> Eigen::Matrix<double, 41, 41>;
auto get_L_H0_41() noexcept -> Eigen::Matrix<double, 42, 42>;
auto get_I_G0_1() noexcept -> Eigen::Matrix<double, 2, 2>;
auto get_I_G0_2() noexcept -> Eigen::Matrix<double, 3, 3>;
auto get_I_G0_3() noexcept -> Eigen::Matrix<double, 4, 4>;
auto get_I_G0_4() noexcept -> Eigen::Matrix<double, 5, 5>;
auto get_I_G0_5() noexcept -> Eigen::Matrix<double, 6, 6>;
auto get_I_G0_6() noexcept -> Eigen::Matrix<double, 7, 7>;
auto get_I_G0_7() noexcept -> Eigen::Matrix<double, 8, 8>;
auto get_I_G0_8() noexcept -> Eigen::Matrix<double, 9, 9>;
auto get_I_G0_9() noexcept -> Eigen::Matrix<double, 10, 10>;
auto get_I_G0_10() noexcept -> Eigen::Matrix<double, 11, 11>;
auto get_I_G0_11() noexcept -> Eigen::Matrix<double, 12, 12>;
auto get_I_G0_12() noexcept -> Eigen::Matrix<double, 13, 13>;
auto get_I_G0_13() noexcept -> Eigen::Matrix<double, 14, 14>;
auto get_I_G0_14() noexcept -> Eigen::Matrix<double, 15, 15>;
auto get_I_G0_15() noexcept -> Eigen::Matrix<double, 16, 16>;
auto get_I_G0_16() noexcept -> Eigen::Matrix<double, 17, 17>;
auto get_I_G0_17() noexcept -> Eigen::Matrix<double, 18, 18>;
auto get_I_G0_18() noexcept -> Eigen::Matrix<double, 19, 19>;
auto get_I_G0_19() noexcept -> Eigen::Matrix<double, 20, 20>;
auto get_I_G0_20() noexcept -> Eigen::Matrix<double, 21, 21>;
auto get_I_G0_21() noexcept -> Eigen::Matrix<double, 22, 22>;
auto get_I_G0_22() noexcept -> Eigen::Matrix<double, 23, 23>;
auto get_I_G0_23() noexcept -> Eigen::Matrix<double, 24, 24>;
auto get_I_G0_24() noexcept -> Eigen::Matrix<double, 25, 25>;
auto get_I_G0_25() noexcept -> Eigen::Matrix<double, 26, 26>;
auto get_I_G0_26() noexcept -> Eigen::Matrix<double, 27, 27>;
auto get_I_G0_27() noexcept -> Eigen::Matrix<double, 28, 28>;
auto get_I_G0_28() noexcept -> Eigen::Matrix<double, 29, 29>;
auto get_I_G0_29() noexcept -> Eigen::Matrix<double, 30, 30>;
auto get_I_G0_30() noexcept -> Eigen::Matrix<double, 31, 31>;
auto get_I_G0_31() noexcept -> Eigen::Matrix<double, 32, 32>;
auto get_I_G0_32() noexcept -> Eigen::Matrix<double, 33, 33>;
auto get_I_G0_33() noexcept -> Eigen::Matrix<double, 34, 34>;
auto get_I_G0_34() noexcept -> Eigen::Matrix<double, 35, 35>;
auto get_I_G0_35() noexcept -> Eigen::Matrix<double, 36, 36>;
auto get_I_G0_36() noexcept -> Eigen::Matrix<double, 37, 37>;
auto get_I_G0_37() noexcept -> Eigen::Matrix<double, 38, 38>;
auto get_I_G0_38() noexcept -> Eigen::Matrix<double, 39, 39>;
auto get_I_G0_39() noexcept -> Eigen::Matrix<double, 40, 40>;
auto get_I_G0_40() noexcept -> Eigen::Matrix<double, 41, 41>;
auto get_I_G0_41() noexcept -> Eigen::Matrix<double, 42, 42>;
auto get_I_H0_1() noexcept -> Eigen::Matrix<double, 2, 2>;
auto get_I_H0_2() noexcept -> Eigen::Matrix<double, 3, 3>;
auto get_I_H0_3() noexcept -> Eigen::Matrix<double, 4, 4>;
auto get_I_H0_4() noexcept -> Eigen::Matrix<double, 5, 5>;
auto get_I_H0_5() noexcept -> Eigen::Matrix<double, 6, 6>;
auto get_I_H0_6() noexcept -> Eigen::Matrix<double, 7, 7>;
auto get_I_H0_7() noexcept -> Eigen::Matrix<double, 8, 8>;
auto get_I_H0_8() noexcept -> Eigen::Matrix<double, 9, 9>;
auto get_I_H0_9() noexcept -> Eigen::Matrix<double, 10, 10>;
auto get_I_H0_10() noexcept -> Eigen::Matrix<double, 11, 11>;
auto get_I_H0_11() noexcept -> Eigen::Matrix<double, 12, 12>;
auto get_I_H0_12() noexcept -> Eigen::Matrix<double, 13, 13>;
auto get_I_H0_13() noexcept -> Eigen::Matrix<double, 14, 14>;
auto get_I_H0_14() noexcept -> Eigen::Matrix<double, 15, 15>;
auto get_I_H0_15() noexcept -> Eigen::Matrix<double, 16, 16>;
auto get_I_H0_16() noexcept -> Eigen::Matrix<double, 17, 17>;
auto get_I_H0_17() noexcept -> Eigen::Matrix<double, 18, 18>;
auto get_I_H0_18() noexcept -> Eigen::Matrix<double, 19, 19>;
auto get_I_H0_19() noexcept -> Eigen::Matrix<double, 20, 20>;
auto get_I_H0_20() noexcept -> Eigen::Matrix<double, 21, 21>;
auto get_I_H0_21() noexcept -> Eigen::Matrix<double, 22, 22>;
auto get_I_H0_22() noexcept -> Eigen::Matrix<double, 23, 23>;
auto get_I_H0_23() noexcept -> Eigen::Matrix<double, 24, 24>;
auto get_I_H0_24() noexcept -> Eigen::Matrix<double, 25, 25>;
auto get_I_H0_25() noexcept -> Eigen::Matrix<double, 26, 26>;
auto get_I_H0_26() noexcept -> Eigen::Matrix<double, 27, 27>;
auto get_I_H0_27() noexcept -> Eigen::Matrix<double, 28, 28>;
auto get_I_H0_28() noexcept -> Eigen::Matrix<double, 29, 29>;
auto get_I_H0_29() noexcept -> Eigen::Matrix<double, 30, 30>;
auto get_I_H0_30() noexcept -> Eigen::Matrix<double, 31, 31>;
auto get_I_H0_31() noexcept -> Eigen::Matrix<double, 32, 32>;
auto get_I_H0_32() noexcept -> Eigen::Matrix<double, 33, 33>;
auto get_I_H0_33() noexcept -> Eigen::Matrix<double, 34, 34>;
auto get_I_H0_34() noexcept -> Eigen::Matrix<double, 35, 35>;
auto get_I_H0_35() noexcept -> Eigen::Matrix<double, 36, 36>;
auto get_I_H0_36() noexcept -> Eigen::Matrix<double, 37, 37>;
auto get_I_H0_37() noexcept -> Eigen::Matrix<double, 38, 38>;
auto get_I_H0_38() noexcept -> Eigen::Matrix<double, 39, 39>;
auto get_I_H0_39() noexcept -> Eigen::Matrix<double, 40, 40>;
auto get_I_H0_40() noexcept -> Eigen::Matrix<double, 41, 41>;
auto get_I_H0_41() noexcept -> Eigen::Matrix<double, 42, 42>;
inline auto get_L_G0(int order) -> Eigen::MatrixXd {
  switch (order) {
    case 1:
      return get_L_G0_1();
      break;
    case 2:
      return get_L_G0_2();
      break;
    case 3:
      return get_L_G0_3();
      break;
    case 4:
      return get_L_G0_4();
      break;
    case 5:
      return get_L_G0_5();
      break;
    case 6:
      return get_L_G0_6();
      break;
    case 7:
      return get_L_G0_7();
      break;
    case 8:
      return get_L_G0_8();
      break;
    case 9:
      return get_L_G0_9();
      break;
    case 10:
      return get_L_G0_10();
      break;
    case 11:
      return get_L_G0_11();
      break;
    case 12:
      return get_L_G0_12();
      break;
    case 13:
      return get_L_G0_13();
      break;
    case 14:
      return get_L_G0_14();
      break;
    case 15:
      return get_L_G0_15();
      break;
    case 16:
      return get_L_G0_16();
      break;
    case 17:
      return get_L_G0_17();
      break;
    case 18:
      return get_L_G0_18();
      break;
    case 19:
      return get_L_G0_19();
      break;
    case 20:
      return get_L_G0_20();
      break;
    case 21:
      return get_L_G0_21();
      break;
    case 22:
      return get_L_G0_22();
      break;
    case 23:
      return get_L_G0_23();
      break;
    case 24:
      return get_L_G0_24();
      break;
    case 25:
      return get_L_G0_25();
      break;
    case 26:
      return get_L_G0_26();
      break;
    case 27:
      return get_L_G0_27();
      break;
    case 28:
      return get_L_G0_28();
      break;
    case 29:
      return get_L_G0_29();
      break;
    case 30:
      return get_L_G0_30();
      break;
    case 31:
      return get_L_G0_31();
      break;
    case 32:
      return get_L_G0_32();
      break;
    case 33:
      return get_L_G0_33();
      break;
    case 34:
      return get_L_G0_34();
      break;
    case 35:
      return get_L_G0_35();
      break;
    case 36:
      return get_L_G0_36();
      break;
    case 37:
      return get_L_G0_37();
      break;
    case 38:
      return get_L_G0_38();
      break;
    case 39:
      return get_L_G0_39();
      break;
    case 40:
      return get_L_G0_40();
      break;
    case 41:
      return get_L_G0_41();
      break;
    default:
      MSG_ABORT("Maximum order is 41");
      break;
  }
}
inline auto get_L_H0(int order) -> Eigen::MatrixXd {
  switch (order) {
    case 1:
      return get_L_H0_1();
      break;
    case 2:
      return get_L_H0_2();
      break;
    case 3:
      return get_L_H0_3();
      break;
    case 4:
      return get_L_H0_4();
      break;
    case 5:
      return get_L_H0_5();
      break;
    case 6:
      return get_L_H0_6();
      break;
    case 7:
      return get_L_H0_7();
      break;
    case 8:
      return get_L_H0_8();
      break;
    case 9:
      return get_L_H0_9();
      break;
    case 10:
      return get_L_H0_10();
      break;
    case 11:
      return get_L_H0_11();
      break;
    case 12:
      return get_L_H0_12();
      break;
    case 13:
      return get_L_H0_13();
      break;
    case 14:
      return get_L_H0_14();
      break;
    case 15:
      return get_L_H0_15();
      break;
    case 16:
      return get_L_H0_16();
      break;
    case 17:
      return get_L_H0_17();
      break;
    case 18:
      return get_L_H0_18();
      break;
    case 19:
      return get_L_H0_19();
      break;
    case 20:
      return get_L_H0_20();
      break;
    case 21:
      return get_L_H0_21();
      break;
    case 22:
      return get_L_H0_22();
      break;
    case 23:
      return get_L_H0_23();
      break;
    case 24:
      return get_L_H0_24();
      break;
    case 25:
      return get_L_H0_25();
      break;
    case 26:
      return get_L_H0_26();
      break;
    case 27:
      return get_L_H0_27();
      break;
    case 28:
      return get_L_H0_28();
      break;
    case 29:
      return get_L_H0_29();
      break;
    case 30:
      return get_L_H0_30();
      break;
    case 31:
      return get_L_H0_31();
      break;
    case 32:
      return get_L_H0_32();
      break;
    case 33:
      return get_L_H0_33();
      break;
    case 34:
      return get_L_H0_34();
      break;
    case 35:
      return get_L_H0_35();
      break;
    case 36:
      return get_L_H0_36();
      break;
    case 37:
      return get_L_H0_37();
      break;
    case 38:
      return get_L_H0_38();
      break;
    case 39:
      return get_L_H0_39();
      break;
    case 40:
      return get_L_H0_40();
      break;
    case 41:
      return get_L_H0_41();
      break;
    default:
      MSG_ABORT("Maximum order is 41");
      break;
  }
}
inline auto get_I_G0(int order) -> Eigen::MatrixXd {
  switch (order) {
    case 1:
      return get_I_G0_1();
      break;
    case 2:
      return get_I_G0_2();
      break;
    case 3:
      return get_I_G0_3();
      break;
    case 4:
      return get_I_G0_4();
      break;
    case 5:
      return get_I_G0_5();
      break;
    case 6:
      return get_I_G0_6();
      break;
    case 7:
      return get_I_G0_7();
      break;
    case 8:
      return get_I_G0_8();
      break;
    case 9:
      return get_I_G0_9();
      break;
    case 10:
      return get_I_G0_10();
      break;
    case 11:
      return get_I_G0_11();
      break;
    case 12:
      return get_I_G0_12();
      break;
    case 13:
      return get_I_G0_13();
      break;
    case 14:
      return get_I_G0_14();
      break;
    case 15:
      return get_I_G0_15();
      break;
    case 16:
      return get_I_G0_16();
      break;
    case 17:
      return get_I_G0_17();
      break;
    case 18:
      return get_I_G0_18();
      break;
    case 19:
      return get_I_G0_19();
      break;
    case 20:
      return get_I_G0_20();
      break;
    case 21:
      return get_I_G0_21();
      break;
    case 22:
      return get_I_G0_22();
      break;
    case 23:
      return get_I_G0_23();
      break;
    case 24:
      return get_I_G0_24();
      break;
    case 25:
      return get_I_G0_25();
      break;
    case 26:
      return get_I_G0_26();
      break;
    case 27:
      return get_I_G0_27();
      break;
    case 28:
      return get_I_G0_28();
      break;
    case 29:
      return get_I_G0_29();
      break;
    case 30:
      return get_I_G0_30();
      break;
    case 31:
      return get_I_G0_31();
      break;
    case 32:
      return get_I_G0_32();
      break;
    case 33:
      return get_I_G0_33();
      break;
    case 34:
      return get_I_G0_34();
      break;
    case 35:
      return get_I_G0_35();
      break;
    case 36:
      return get_I_G0_36();
      break;
    case 37:
      return get_I_G0_37();
      break;
    case 38:
      return get_I_G0_38();
      break;
    case 39:
      return get_I_G0_39();
      break;
    case 40:
      return get_I_G0_40();
      break;
    case 41:
      return get_I_G0_41();
      break;
    default:
      MSG_ABORT("Maximum order is 41");
      break;
  }
}
inline auto get_I_H0(int order) -> Eigen::MatrixXd {
  switch (order) {
    case 1:
      return get_I_H0_1();
      break;
    case 2:
      return get_I_H0_2();
      break;
    case 3:
      return get_I_H0_3();
      break;
    case 4:
      return get_I_H0_4();
      break;
    case 5:
      return get_I_H0_5();
      break;
    case 6:
      return get_I_H0_6();
      break;
    case 7:
      return get_I_H0_7();
      break;
    case 8:
      return get_I_H0_8();
      break;
    case 9:
      return get_I_H0_9();
      break;
    case 10:
      return get_I_H0_10();
      break;
    case 11:
      return get_I_H0_11();
      break;
    case 12:
      return get_I_H0_12();
      break;
    case 13:
      return get_I_H0_13();
      break;
    case 14:
      return get_I_H0_14();
      break;
    case 15:
      return get_I_H0_15();
      break;
    case 16:
      return get_I_H0_16();
      break;
    case 17:
      return get_I_H0_17();
      break;
    case 18:
      return get_I_H0_18();
      break;
    case 19:
      return get_I_H0_19();
      break;
    case 20:
      return get_I_H0_20();
      break;
    case 21:
      return get_I_H0_21();
      break;
    case 22:
      return get_I_H0_22();
      break;
    case 23:
      return get_I_H0_23();
      break;
    case 24:
      return get_I_H0_24();
      break;
    case 25:
      return get_I_H0_25();
      break;
    case 26:
      return get_I_H0_26();
      break;
    case 27:
      return get_I_H0_27();
      break;
    case 28:
      return get_I_H0_28();
      break;
    case 29:
      return get_I_H0_29();
      break;
    case 30:
      return get_I_H0_30();
      break;
    case 31:
      return get_I_H0_31();
      break;
    case 32:
      return get_I_H0_32();
      break;
    case 33:
      return get_I_H0_33();
      break;
    case 34:
      return get_I_H0_34();
      break;
    case 35:
      return get_I_H0_35();
      break;
    case 36:
      return get_I_H0_36();
      break;
    case 37:
      return get_I_H0_37();
      break;
    case 38:
      return get_I_H0_38();
      break;
    case 39:
      return get_I_H0_39();
      break;
    case 40:
      return get_I_H0_40();
      break;
    case 41:
      return get_I_H0_41();
      break;
    default:
      MSG_ABORT("Maximum order is 41");
      break;
  }
}

} // namespace detail
inline auto get_G0(int type, int order) -> Eigen::MatrixXd {
  auto func_type = static_cast<mrcpp::FuncType>(type);
  switch (func_type) {
    case mrcpp::FuncType::Legendre:
      return detail::get_L_G0(order);
      break;
    case mrcpp::FuncType::Interpol:
      return detail::get_I_G0(order);
      break;
    default:
      MSG_ABORT("Unknown filter type");
      break;
  }
}

inline auto get_H0(int type, int order) -> Eigen::MatrixXd {
  auto func_type = static_cast<mrcpp::FuncType>(type);
  switch (func_type) {
    case mrcpp::FuncType::Legendre:
      return detail::get_L_H0(order);
      break;
    case mrcpp::FuncType::Interpol:
      return detail::get_I_H0(order);
      break;
    default:
      MSG_ABORT("Unknown filter type");
      break;
  }
}

} // namespace mrcpp
