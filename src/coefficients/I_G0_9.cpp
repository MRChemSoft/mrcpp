/*
 * MRCPP, a numerical library based on multiresolution analysis and
 * the multiwavelet basis which provide low-scaling algorithms as well as
 * rigorous error control in numerical computations.
 * Copyright (C) 2019 Stig Rune Jensen, Jonas Juselius, Luca Frediani and contributors.
 *
 * This file is part of MRCPP.
 *
 * MRCPP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MRCPP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MRCPP.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For information on the complete list of contributors to MRCPP, see:
 * <https://mrcpp.readthedocs.io/>
 */

// THIS FILE HAS BEEN AUTOGENERATED, DO NOT TOUCH

#include "FilterData.h"

#include <Eigen/Core>


namespace mrcpp {
namespace detail {
auto get_I_G0_9() noexcept -> Eigen::Matrix<double, 10, 10> {
  return (Eigen::Matrix<double, 10, 10>() << 0.23645080359217, -0.360429375843502, 0.17514275198936, 0.182499159422634, -0.334901600418287, 0.0293415972852554, 0.296543259792271, 0.0322020450508516, -0.165535766214947, -0.144235148009329, -0.189256511022575, 0.346301214114681, -0.316912313585251, 0.0781306929211812, 0.233597997656291, -0.302792647594066, -0.0491622439001142, 0.255280059372526, 0.152993991317859, 0.0218223325060235, 0.137344724532952, -0.286089316852915, 0.35835185112786, -0.296367855336337, 0.0685568027550945, 0.226854248280967, -0.267678980535199, -0.115366712996239, 0.14598969740848, 0.143533907275295, 0.0849646064210302, -0.194307377011189, 0.295482522540435, -0.359792712653239, 0.325868281138668, -0.120176082318491, -0.195977970150249, 0.215255356940571, 0.179765608679894, 0.0239709560916591, 0.0401487710139387, -0.0988500867898183, 0.173258149934481, -0.266759947397112, 0.361981392273456, -0.385103874288345, 0.195145219169183, 0.176101772470328, -0.115128114644018, -0.160480480172193, -0.0111013328714783, 0.0297743043974544, -0.060718245512442, 0.116379632035233, -0.213781736686131, 0.355764445460492, -0.454695780964071, 0.249923128317731, 0.193418932605531, 0.0535504317078644, 0.000856321505985786, -0.00109195994636879, -0.00181744625791307, 0.0138540895350033, -0.0506505166484283, 0.1469303073784, -0.343465448203507, 0.530108717551135, -0.218380472351408, -0.170220586676162, -0.0024937517644369, 0.00609619260997732, -0.0105605842036684, 0.0158425969939142, -0.0190773993173281, 0.00501413796234893, 0.0821600999947548, -0.351480936273542, 0.607200936427523, -0.0149300797724896, -0.00124045754092026, 0.00314752507738569, -0.00592861256306006, 0.0105688186876295, -0.0188510139640747, 0.0325671979420679, -0.0422361920078541, -0.0348475891796796, 0.438182251126829, -0.550839166433174, 0.000313495671462838, -0.000799017050745445, 0.00152743121049036, -0.00283766073682955, 0.00560988316701664, -0.0123120354728289, 0.0291101894293648, -0.0582401724865146, -0.0199612436806908, 0.703681780957751).finished();
}
} // namespace mrcpp
} // namespace detail
