/*
 * MRCPP, a numerical library based on multiresolution analysis and
 * the multiwavelet basis which provide low-scaling algorithms as well as
 * rigorous error control in numerical computations.
 * Copyright (C) 2019 Stig Rune Jensen, Jonas Juselius, Luca Frediani and contributors.
 *
 * This file is part of MRCPP.
 *
 * MRCPP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MRCPP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MRCPP.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For information on the complete list of contributors to MRCPP, see:
 * <https://mrcpp.readthedocs.io/>
 */

// THIS FILE HAS BEEN AUTOGENERATED, DO NOT TOUCH

#include "FilterData.h"

#include <Eigen/Core>


namespace mrcpp {
namespace detail {
auto get_I_H0_9() noexcept -> Eigen::Matrix<double, 10, 10> {
  return (Eigen::Matrix<double, 10, 10>() << 0.897549266737826, 0.431422872589187, -0.0646328604113666, -0.0351394014968334, 0.0415195959289821, -0.00265002678500363, -0.0212656270961707, -0.00196013436518458, 0.0090442593194069, 0.00743413514578602, -0.212361096363265, 0.584819953304181, 0.756082300781253, 0.134657120717821, -0.126149153396625, 0.00730846580681725, 0.0558014240879499, 0.00500194670612181, -0.0227201539568038, -0.0185321116936218, 0.123105569157991, -0.227999463125297, 0.174950562870231, 0.783671429940964, 0.510841106029747, -0.0185078470064282, -0.119872340320685, -0.00993262758205749, 0.0433137562535811, 0.0346580460342283, -0.0840022585103698, 0.142008464629272, -0.0847712346223648, -0.126684640029878, 0.466963198522974, 0.736703985049217, 0.388544309995398, 0.0231886074012307, -0.0889632201406256, -0.0674799321172999, 0.0608806284569968, -0.099246962547484, 0.0547071326706558, 0.0693538966755145, -0.169815288207286, 0.0228831553440523, 0.476016151505185, 0.60842528796136, 0.438791858662192, 0.229142854836525, -0.0449212288219365, 0.0719208229844559, -0.0382299726267979, -0.045496805426287, 0.0999114128100156, -0.0110221031468921, -0.14806418452441, -0.0224755322414541, 0.165109833461079, 0.192216639034181, 0.0327385188365189, -0.0518926516950695, 0.0270547041138942, 0.0312062132550916, -0.0653494647083317, 0.00671776655317634, 0.0813701743313129, 0.010666856960275, -0.0649958271037569, -0.0635358919684096, -0.0227203469690596, 0.0358026114640743, -0.0184605840852248, -0.0209307994554046, 0.0427677599610816, -0.00425183162146182, -0.0493214079268438, -0.00614045511315579, 0.0354883639603443, 0.0333520448749236, 0.0139764793959992, -0.0219497810673494, 0.0112467935429021, 0.012630538418728, -0.0254687287777782, 0.00248877223143389, 0.0282689536051621, 0.00343802918383479, -0.0194325647649345, -0.0179814209241434, -0.0059719150452118, 0.00936303859536018, -0.00478263592099184, -0.00534611487430306, 0.0107119668547249, -0.00103834033788356, -0.0116815373586695, -0.00140608802779617, 0.00787234518204344, 0.00723758845968556).finished();
}
} // namespace mrcpp
} // namespace detail
