/*
 * MRCPP, a numerical library based on multiresolution analysis and
 * the multiwavelet basis which provide low-scaling algorithms as well as
 * rigorous error control in numerical computations.
 * Copyright (C) 2021 Stig Rune Jensen, Jonas Juselius, Luca Frediani and contributors.
 *
 * This file is part of MRCPP.
 *
 * MRCPP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MRCPP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MRCPP.  If not, see <https://www.gnu.org/licenses/>.
 *
 * For information on the complete list of contributors to MRCPP, see:
 * <https://mrcpp.readthedocs.io/>
 */

#pragma once

#include "DerivativeOperator.h"

namespace mrcpp {

/** @class BSOperator
 *  @ingroup operators
 *
 *  @brief Smooth multiresolution derivative operator (“BS” operator).
 *
 *  This class builds a derivative operator in the multiresolution scaling basis
 *  tailored for **smooth** functions. The discrete stencil is compact (nearest-
 *  neighbor bandwidth) and its local blocks are generated by the *BS* scheme
 *  (see Anderson *et al.*, J. Comp. Phys. X 4, 100033 (2019)).
 *
 *  ### When to use
 *  - Prefer this operator when the target function is sufficiently smooth at
 *    the scales of interest (e.g. no strong cusps or jump discontinuities).
 *  - For functions with cusps/discontinuities, use #mrcpp::ABGVOperator instead,
 *    which is more robust in the non-smooth regime.
 *
 *  ### What it builds internally
 *  The constructor triggers an assembly pipeline (via a hidden `initialize()`)
 *  that:
 *   1. Creates a sparse, bandwidth-1 operator tree on the provided
 *      #mrcpp::MultiResolutionAnalysis (MRA).
 *   2. Uses a calculator (BS formulation) to fill local operator blocks for the
 *      requested derivative order.
 *   3. Finalizes and caches per-node data for fast application.
 *
 *  ### Complexity & reuse
 *  - **Build**: one-time cost per (MRA, derivative order).
 *  - **Apply**: fast, cache-friendly application to MR coefficient vectors.
 *
 *  @tparam D Spatial dimension (1, 2, or 3).
 *
 *  @see mrcpp::ABGVOperator
 *  @see mrcpp::DerivativeOperator
 *  @see mrcpp::OperatorTree
 *  @see mrcpp::MultiResolutionAnalysis
 */
template <int D> class BSOperator final : public DerivativeOperator<D> {
public:
    /**
     * @brief Construct a BS derivative operator on a given MRA.
     *
     * The operator is anchored to the MRA’s root scale (handled by the
     * #mrcpp::DerivativeOperator base class) and immediately assembled. The
     * derivative order typically supports 1, 2, or 3 (as provided by the BS
     * calculator implementation).
     *
     * @param mra   Multiresolution analysis defining basis, domain, and scales.
     * @param order Derivative order (e.g., 1, 2, or 3).
     *
     * @note This operator assumes smoothness; if your target function has
     *       strong non-smooth features, consider #mrcpp::ABGVOperator.
     *
     * @code
     * MultiResolutionAnalysis<1> mra(...);
     * BSOperator<1> Dx(mra, 1); // first derivative in 1D
     * // apply Dx to a function tree / coefficient vector later...
     * @endcode
     */
    explicit BSOperator(const MultiResolutionAnalysis<D> &mra, int order);

    /// Deleted copy constructor: operators are heavyweight and own caches.
    explicit BSOperator(const BSOperator &oper) = delete;
    /// Deleted assignment.
    BSOperator &operator=(const BSOperator &oper) = delete;

protected:
    /**
     * @brief Assemble and cache the operator (implementation detail).
     *
     * Internal steps (performed once at construction):
     *  - Choose a compact bandwidth (nearest-neighbor coupling).
     *  - Use a BS-based calculator to generate local blocks for the requested
     *    derivative order.
     *  - Build a sparse #mrcpp::OperatorTree on the provided MRA.
     *  - Precompute norms and per-node caches for fast application.
     *
     * @warning This is not intended to be called by users directly.
     */
    void initialize();
};

} // namespace mrcpp